# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets, uic
from PyQt6.uic import loadUi 
from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import QApplication, QMainWindow, QLineEdit, QDialog, QFileDialog
from PyQt6.QtGui import QIcon
import pandas as pd
import numpy as np
import fpdf
from fpdf import FPDF


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(350, 400, 100, 50))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(150, 0, 500, 400))
        self.label.setWordWrap(True);
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label.setFont(font)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.disclaimer)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Click to Continue"))
        self.label.setText(_translate("MainWindow", "DGA (Dissolved Gas Analysis)"))
        self.pushButton.clicked.connect(self.disclaimer)

    def disclaimer(self, MainWindow):
        self.label.setText("There are various issues that can interfere with or complicate that. Those issues must be recognized and dealt with before a final conclusion can be reached when interpreting DGA results.")
        self.pushButton.clicked.connect(self.detailsform)

    def detailsform(self):
        widget.setCurrentIndex(widget.currentIndex()+1)



class Form(QMainWindow):
    f1=''
    f2=''
    locono=''
    reg=''
    equser=''
    repnum=''
    samdate=''
    repdate=''
    testdate=''
    otherdet=''
    resultname=''
    c2h2=0
    c2h4=0
    ch4=0
    def __init__(self):
        super(Form, self).__init__()
        uic.loadUi(r"C:\Users\MyPc\Documents\centurion\form.ui", self)  
        # self.loconotext=QtWidgets.QTextEdit(self.centralwidget)
        # self.loconotext.setObjectName("loconotext")
        
        self.h2btn.clicked.connect(self.browseh2)
        self.hcbtn.clicked.connect(self.browsehc)
        self.genresbtn.clicked.connect(self.genres)

    def browseh2(self):
        
        f1name=QFileDialog.getOpenFileName(self, 'Open File', r'', 'CSV Files (*.csv)')
        self.h2line.setText(f1name[0])
        Form.f1=f1name[0]
    
    def browsehc(self):
        f2name=QFileDialog.getOpenFileName(self, 'Open File', r'', 'CSV Files (*.csv)')
        self.hcline.setText(f2name[0])
        Form.f2=f2name[0]

        
    def genres(self):
        Form.locono=self.loconotext.text()
        Form.reg=self.regiontext.text()
        Form.equser=self.equsertext.text()
        Form.repnum=self.repnumtext.text()
        Form.samdate=self.samdatetext.text()
        Form.repdate=self.repdatetext.text()
        Form.testdate=self.testdatetext.text()
        Form.otherdet=self.otherdettext.text()
        Form.resultname=self.resfilename.text()
        # reading the files
        f1 = pd.read_csv(Form.f1)
        f2 = pd.read_csv(Form.f2)
        #df.append(f1)
        #df.append(f2)  
        df =[f1,f2]
        # merging the files
        f3 = pd.concat(df) #f1[["S.No", "Retain.T", "Area", "Conc", "Name"]].merge(f2[["S.No", "Retain.T", "Area", "Conc","Name"]], on = "Name", how = "left")
        
        # creating a new file
        f3.to_csv("Results.csv", index = False)
        rd=pd.read_csv("Results.csv")

        pdf = FPDF()
        pdf.add_page()
        pdf.image(r'EastCoastRailwayZone.png', x=168, y=0, w=50)  # Top Right corner logo
        # Title of Document
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=30, style='B')
        pdf.set_xy(10,5)
        pdf.cell(0, 12.5, txt='Dissolved Gas Analysis Report', ln=1, align="L" , fill = False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(10,15)
        pdf.cell(0, 13, txt='Loco. No.:', ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(38,15)
        pdf.cell(0, 13, txt=str(Form.locono), ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(10,20)
        pdf.cell(0, 13, txt='Equipment User:', ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(54,20)
        pdf.cell(0, 13, txt=str(Form.equser), ln=1, align="L",fill=False)
        # Text box of sampling date
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(10,25)
        pdf.cell(0, 13, txt='Sampling Date:', ln=1, align="L",fill=False)
        # Text box of samdatetext
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(49,25)
        pdf.cell(0, 13, txt=str(Form.samdate), ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(10,30)
        pdf.cell(0, 13, txt='Test Date:', ln=1, align="L",fill=False)
        # Text box of testdate
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(38,30)
        pdf.cell(0, 13, txt=str(Form.testdate), ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(10,35)
        pdf.cell(0, 13, txt='Other Details:', ln=1, align="L",fill=False)
        # Text box of other details
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(46,35)
        pdf.cell(0, 13, txt=str(Form.otherdet), ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(100,15)
        pdf.cell(0, 13, txt='Region:', ln=1, align="L",fill=False)
        # Text box of region
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(123,15)
        pdf.cell(0, 13, txt=str(Form.reg), ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(100,20)
        pdf.cell(0, 13, txt='Report No.:', ln=1, align="L",fill=False)
        # Text box of repno
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(130,20)
        pdf.cell(0, 13, txt=str(Form.repnum), ln=1, align="L",fill=False)
        # Text box of header
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15, style='B')
        pdf.set_xy(100,25)
        pdf.cell(0, 13, txt='Report Date:', ln=1, align="L",fill=False)
        # Text box of repdate
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=15)
        pdf.set_xy(134,25)
        pdf.cell(0, 13, txt=str(Form.repdate), ln=1, align="L",fill=False)
        # Title of Results
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=21, style='B')
        pdf.set_xy(90,50)
        pdf.cell(0, 12.5, txt='Results', ln=1, align="L" , fill = False)
        # Title of Gas Components
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=18, style='B')
        pdf.set_xy(50,60)
        pdf.cell(0, 12.5, txt='Gas Components', ln=1, align="L" , fill = False)
        # Title of Concentration
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=18, style='B')
        pdf.set_xy(110,60)
        pdf.cell(0, 12.5, txt='Concentration', ln=1, align="L" , fill = False)

        # Text box of Duval Headings
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=20, style='B')
        pdf.set_xy(10,120)
        pdf.cell(0, 13, txt='Interpretation (based on Duvals Triangle):', ln=1, align="L",fill=False)


        # Creating variables
        y=0
        pdf.set_xy(50,y+76)
        
        # table
        for i in range(0, 7):
            name = rd['Name'].iloc[i]
            conc = rd['Conc'].iloc[i]
            dispconc = str(conc) #to display conc in text
            if (name!="Sum:"):
                pdf.set_text_color(0,0,0)
                pdf.set_font("Arial", size=13)
                pdf.set_xy(50,y+76)
                pdf.cell(62, 5, txt= name, border=1, align="J")

                pdf.set_text_color(0,0,0)
                pdf.set_font("Arial", size=13)
                pdf.set_xy(112,y+76)
                pdf.cell(40, 5, txt= dispconc, border=1, ln=1, align="J")
                y=y+5

            if (name == "C2H2"):
                Form.c2h2=conc
            elif(name == "C2H4"):
                Form.c2h4=conc
            elif(name == "CH4"):
                Form.ch4=conc
        result=''
        if((Form.ch4>120)|(Form.c2h4>50)|(Form.c2h2>1)):
            p1=(((Form.c2h2)/(Form.c2h2+Form.c2h4+Form.ch4))*100)
            p2=(((Form.c2h4)/(Form.c2h2+Form.c2h4+Form.ch4))*100)
            p3=(((Form.ch4)/(Form.c2h2+Form.c2h4+Form.ch4))*100)
            if(p1>=98):
                result="Partial Discharge - PD"
            elif(p3<4):
                if((p2>=20)&(p2<=50)):
                    result="Thermal Fault 300-700 Degree Celsius - T2"
                elif(p2<20):
                    result="Thermal Fault 300 Degree Celsius - T1"
            elif(p3<13):
                if(p2<23):
                    result="Discharge of Low Energy - D1"
            elif(p3<15):
                if(p2>=50):
                    result="Thermal Fault > 700 Degree Celsius - T3"
            elif((p3>=29)&(p3<=77)):
                if((p2>=23)&(p2<=40)):
                    result="Discharge of High Energy - D2"
            else:
                result="Thermal and Electrical Fault - DT"
        else:
            result="Duval Triangle Test is Not Applicable"
        # Text box of Duval Results
        pdf.set_fill_color(255,255,255)
        pdf.set_text_color(0,0,0)
        pdf.set_font("Arial", size=20, style='B')
        pdf.set_xy(10,130)
        pdf.cell(0, 13, txt=result, ln=1, align="L",fill=False)

        # Exporting PDF
        pdf.output(Form.resultname) 

        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    widget=QtWidgets.QStackedWidget()
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    
    form=Form()
    widget.addWidget(MainWindow)
    widget.addWidget(form)
    widget.setFixedHeight(800)
    widget.setFixedWidth(800)
    widget.show()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
